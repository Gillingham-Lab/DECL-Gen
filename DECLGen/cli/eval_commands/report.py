import os
import pandas as pd
import argh
import io
import base64
from rdkit import Chem
from rdkit.Chem import AllChem, Draw
from DECLGen.report import HTMLReport, TextReport

_full_template = b"""<!DOCTYPE html>
<html>
	<head>
		<style>
			body {
				font-family: "Latin Modern Sans", "Arial", sans-serif;
			}
			
			dl {
			}
			
			dl dt {
				font-weight: bold;
				float: left;
				width: 20em;
			}
			
			dl dt:after {
				content: ":";
			}
			
			table {
				border-collapse: collapse;
			}
			
			thead th, tbody td {
				padding: 1em;
				border-top: 1px solid black;
				border-bottom: 1px solid black;
			}
			
			tbody tr:last-child td {
				border-bottom: 1px solid black;
			}
			
			.smiles {
				font-family: "Latin Modern Mono", "Courier New", monospace;
			}
		</style>
		<title>Report - {title}</title>
	</head>
	<body>
		<h1>Report - {title}</h1>
		<h2>Statistics</h2>
			<dl>
			    {stats}
			</dl>
		
		<h2>Top hits</h2>
		<table>
			<thead>
				<tr>
					<th>Ranking</th>
					<th>RelCounts</th>
					<th>codons</th>
					<th>SMILES</th>
					<th>Structure</th>
				</tr>
			</thead>
			
			<tbody>
				{table_entries}
			</tbody>
		</table>
		
		<p>
		    This report was automatically generated by devlEval report.
		</p>
	</body>
</html>
"""

_stats = b"<dt>{name}</dt><dd>{value}</dd>"
_entry = b"""<tr>
    <td>{rank}</td>
    <td>{count}</td>
    <td>{codon}</td>
    <td class="smiles">{smiles}</td>
    <td><img src="data:image/png;base64,{imgb64}" /></td>
</tr>
"""

@argh.arg("--save-as", type=str)
@argh.arg("--top")
def report(
        result: "Result file (csv, either from declEval extract or declEval compare)",
        save_as: "Report file name. Will be derived from result file name if not given." = None,
        top: "Number of molecules to report of" = 10,
):
    # Check if library has already been loaded
    if not os.path.exists("library-properties.csv"):
        print("You must run declGen lib-generate first before you can create a report")
        exit(1)

    if save_as is None:
        save_as = os.path.join(os.path.dirname(result), os.path.basename(result) + ".report.html")

    html_report = HTMLReport(save_as)
    html_report.set_title(os.path.basename(result))
    text_report = TextReport(save_as)
    text_report.title = html_report.title

    #
    res = pd.read_csv(result, sep="\t")
    if "CountRel" in res.columns:
        column = "CountRel"
    elif "Count" in res.columns:
        column = "Count"
    else:
        print("Cannot detect format of {}. Are you sure it was created by declEval extract or devlEval compare?".format(res))
        exit(1)

    res = res.sort_values(by=column, ascending=False, kind="mergesort")
    library = pd.read_csv("library-properties.csv", sep=",")

    merged = res.merge(library, on="Codon-Combination", how="outer")

    unknown_structures = len(merged[merged["Canonical smiles"].isna()])
    uncovered_structures = len(merged[merged[column].isna()])

    merged_reduced = merged.dropna()
    valid_structures = len(merged_reduced)

    html_report.add_stats("Unknown structures", "{:d} ({:.1f}%)".format(unknown_structures, unknown_structures / len(res) * 100))
    html_report.add_stats("Library structures not in dataset", "{:d} ({:.1f}%)".format(uncovered_structures, uncovered_structures/len(library)*100))
    html_report.add_stats("Valid structures", "{:d} ({:.1f}% of results, {:.1f}% of all structures)".format(valid_structures,
                                                                                          valid_structures / len(res) * 100,
                                                                                          valid_structures / len(library) * 100))

    text_report.stats = html_report.stats

    print("Unknown structures: {:d} ({:.1f}%)".format(unknown_structures, unknown_structures / len(res) * 100))
    print("Library-Structures not in dataset: {:d} ({:.1f}%)".format(uncovered_structures, uncovered_structures/len(library)*100))
    print("Valid structures: {:d} ({:.1f}% of results, {:.1f}% of all structures)".format(valid_structures,
                                                                                          valid_structures / len(res) * 100,
                                                                                          valid_structures / len(library) * 100))

    top_hits: pd.DataFrame = merged_reduced[:top].reset_index()

    for i in range(len(top_hits)):
        smiles = top_hits["Canonical smiles"][i]
        relCount = top_hits[column][i]
        codonComb  = top_hits["Codon-Combination"][i]
        m = Chem.MolFromSmiles(smiles)
        AllChem.Compute2DCoords(m)

        with io.BytesIO() as image_stream:
            img = Draw.MolToImage(m, size=(300, 300), kekulize=True, wedgeBonds=True)
            img.save(image_stream, format="png")

            img_base64 = base64.b64encode(image_stream.getvalue())

        html_report.add_entry(i+1, relCount, codonComb, smiles, img_base64)

    html_report.save()

    print(text_report)